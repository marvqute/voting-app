name: deploy to ec2
on:
    push:
        branches:
            - main
    workflow_dispatch:
jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v2
            
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: login to dockerhub 
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and push vote service
              uses: docker/build-push-action@v4
              with:
                context: ./vote
                file: ./vote/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/vote:latest

            - name: Build and push result service
              uses: docker/build-push-action@v4
              with:
                context: ./result
                file: ./result/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/result:latest

            - name: Build and push worker service
              uses: docker/build-push-action@v4
              with:
                context: ./worker
                file: ./worker/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/worker:latest

    terraform-deploy:
        runs-on: ubuntu-latest
        needs: build-and-push
        outputs:
          ec2_ip: ${{ steps.terraform-output.outputs.public_ip }}
        steps:
        - name: Checkout Code
          uses: actions/checkout@v2

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.5.0

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-central-1

        - name: Terraform Init
          working-directory: ./worker/terraform
          run: terraform init

        - name: Terraform Plan
          working-directory: ./worker/terraform
          run: terraform plan

        - name: Terraform Apply
          working-directory: ./worker/terraform
          run: terraform apply -auto-approve

        - name: Get Terraform Outputs
          id: terraform-output
          working-directory: ./worker/terraform
          run: |
            echo "public_ip=$(terraform output -raw public_ip)" >> $GITHUB_OUTPUT
            echo "vote_url=$(terraform output -raw vote_app_url)" >> $GITHUB_OUTPUT
            echo "result_url=$(terraform output -raw result_app_url)" >> $GITHUB_OUTPUT

    deploy-to-ec2:
        runs-on: ubuntu-latest
        needs: terraform-deploy
        steps:
        - name: Checkout Code 
          uses: actions/checkout@v2 

        - name: Setup SSH key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H ${{ needs.terraform-deploy.outputs.ec2_ip }} >> ~/.ssh/known_hosts

        - name: Wait for EC2 to be ready
          run: |
            echo "Waiting for EC2 instance to be ready..."
            for i in {1..30}; do
              if ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o ConnectTimeout=5 ec2-user@${{ needs.terraform-deploy.outputs.ec2_ip }} "echo 'Connected'"; then
                echo "EC2 instance is ready!"
                break
              fi
              echo "Attempt $i failed, waiting 30 seconds..."
              sleep 30
            done

        - name: Copy docker-compose file
          run: scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.prod.yaml ec2-user@${{ needs.terraform-deploy.outputs.ec2_ip }}:/home/ec2-user/docker-compose.yaml

        - name: Deploy to EC2
          run: |
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ec2-user@${{ needs.terraform-deploy.outputs.ec2_ip }} << 'EOF'
              cd /home/ec2-user
              
              # Stop existing containers
              docker-compose down || true
              
              # Pull latest images and start services
              docker-compose pull
              docker-compose up -d
              
              # Show running containers
              docker ps
            EOF

        - name: Display App URLs
          run: |
            echo "ðŸŽ‰ Deployment completed successfully!"
            echo "ðŸ“Š Vote App: http://${{ needs.terraform-deploy.outputs.ec2_ip }}:5000"
            echo "ðŸ“ˆ Results App: http://${{ needs.terraform-deploy.outputs.ec2_ip }}:8091"
            echo "ðŸ”— SSH Access: ssh -i your-key.pem ec2-user@${{ needs.terraform-deploy.outputs.ec2_ip }}"
