name: deploy to ec2
on:
    push:
        branches:
            - main
    workflow_dispatch:
jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout Code 
              uses: actions/checkout@v2
            
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v2

            - name: login to dockerhub 
              uses: docker/login-action@v2
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_TOKEN }}

            - name: Build and push vote service
              uses: docker/build-push-action@v4
              with:
                context: ./vote
                file: ./vote/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/vote:latest

            - name: Build and push result service
              uses: docker/build-push-action@v4
              with:
                context: ./result
                file: ./result/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/result:latest

            - name: Build and push worker service
              uses: docker/build-push-action@v4
              with:
                context: ./worker
                file: ./worker/Dockerfile
                push: true
                tags: ${{ secrets.DOCKER_USERNAME }}/worker:latest


    deploy-to-ec2:
        runs-on: ubuntu-latest
        needs: build-and-push
        # test
        steps:
        - name: Checkout Code 
          uses: actions/checkout@v2 

        - name: Setup SSH key
          run: |
            mkdir -p ~/.ssh
            echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

        - name: Test SSH connection
          run: ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "echo 'SSH connection successful'"

        - name: Copy docker-compose file
          run: scp -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no docker-compose.prod.yaml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ec2-user/docker-compose.yaml

        - name: Deploy to EC2
          run: |
            ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
              cd /home/ec2-user
              
              # Install Docker Compose if not present
              if ! command -v docker-compose &> /dev/null; then
                echo "Installing Docker Compose..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
                sudo ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
              fi
              
              # Stop existing containers
              docker-compose down || true
              
              # Pull latest images and start services
              docker-compose pull
              docker-compose up -d
              
              # Show running containers
              docker ps
            EOF
        
